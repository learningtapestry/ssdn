AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for Nucleus
Parameters:
  Environment:
    Type: String
    Description: The current environment where the deployment is taking place.
    Default: Development
  NucleusId:
    Type: String
    Description: An unique identifier for this particular Nucleus installation. Used in resource names.
  Namespace:
    Type: String
    Description: A namespace that identifies the default data domain for this instance. Used for partitioning data.
  NotificationEmail:
    Type: String
    Description: The default e-mail address for notification purposes.
Globals:
  Function:
    Timeout: 30
    Runtime: nodejs8.10
    Handler: index.handler
    Environment:
      Variables:
        NUCLEUS_AWS_ACCOUNT_ID: !Ref AWS::AccountId
        NUCLEUS_ENVIRONMENT: !Ref Environment
        NUCLEUS_ID: !Ref NucleusId
        NUCLEUS_LOG_LEVEL: info
        NUCLEUS_NAMESPACE: !Ref Namespace
        NUCLEUS_STACK_ID: !Ref AWS::StackId
Resources:
  #
  # Auth
  #
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub Nucleus-${NucleusId}-UserPool
      Schema:
        - Name: email
          Required: true
          Mutable: true
      AutoVerifiedAttributes: ["email"]
      EmailVerificationMessage: "Your verification code is {####}"
      EmailVerificationSubject: "Your verification code"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      SmsVerificationMessage: "Your verification code is {####}"
      SmsConfiguration:
        SnsCallerArn: !GetAtt SNSRole.Arn
        ExternalId: !Sub Nucleus-${NucleusId}-SNSExternalId
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub Nucleus-${NucleusId}-AppClient
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub Nucleus-${NucleusId}-AppClientWeb
      UserPoolId: !Ref CognitoUserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join
        - "_"
        - !Split
          - "-"
          - !Sub Nucleus_${NucleusId}_IdentityPool
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region", client: !Ref CognitoUserPool }
        - ClientId: !Ref CognitoUserPoolClientWeb
          ProviderName: !Sub
            - cognito-idp.${region}.amazonaws.com/${client}
            - { region: !Ref "AWS::Region", client: !Ref CognitoUserPool }
      AllowUnauthenticatedIdentities: false
  CognitoIdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Nucleus-${NucleusId}-SNSRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: !Sub Nucleus-${NucleusId}-SNSExternalId
      Policies:
        - PolicyName: !Sub Nucleus-${NucleusId}-SNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "*"
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Nucleus-${NucleusId}-AuthRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Sub Nucleus-${NucleusId}-AdminPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - cloudformation:DescribeStacks
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                Resource:
                  - "*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !Sub ${NucleusConnectionRequestsTable.Arn}*
                  - !Sub ${NucleusIncomingConnectionRequestsTable.Arn}*
                  - !Sub ${NucleusConnectionsTable.Arn}*
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExchangeApi}/${Environment}/*
  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub Nucleus-${NucleusId}-UnauthRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
  #
  # Lambda
  #
  LambdaDeadLetterQueueTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub Nucleus-${NucleusId}-DeadLetterQueue
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email
  #
  # API Gateway
  #
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  CollectionApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub Nucleus-${NucleusId}-CollectionApiKey
      Description: Default API Key to access the Nucleus collection endpoint
      Enabled: true
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - ProcessXAPIStatementApiStage
      - ProcessXAPIBeaconApiStage
      - ExchangeApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref ProcessXAPIStatementApi
          Stage: !Ref Environment
        - ApiId: !Ref ProcessXAPIBeaconApi
          Stage: !Ref Environment
        - ApiId: !Ref ExchangeApi
          Stage: !Ref Environment
      UsagePlanName: !Sub Nucleus-${NucleusId}-UsagePlan
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - CollectionApiKey
      - ApiUsagePlan
    Properties:
      KeyId: !Ref CollectionApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  #
  # Event Collection
  #
  EventProcessorStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub Nucleus-${NucleusId}-EventProcessor
      RetentionPeriodHours: 48
      ShardCount: 1
  EventDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt EventProcessorStream.Arn
        RoleARN: !GetAtt EventDeliveryStreamRole.Arn
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DeliveryS3Bucket.Arn
        RoleARN: !GetAtt EventDeliveryStreamRole.Arn
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 1
        CompressionFormat: UNCOMPRESSED
        Prefix: "Events/"
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Sub Nucleus-${NucleusId}-EventDeliveryStreamGroup
          LogStreamName: !Sub Nucleus-${NucleusId}-EventDeliveryStreamLog
  EventDeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub Nucleus-${NucleusId}-EventDeliveryStreamRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub arn:aws:s3:::${DeliveryS3Bucket}
                  - !Sub arn:aws:s3:::${DeliveryS3Bucket}/*
              - Effect: "Allow"
                Action:
                  - "kinesis:DescribeStream"
                  - "kinesis:GetShardIterator"
                  - "kinesis:GetRecords"
                Resource:
                  - !GetAtt EventProcessorStream.Arn
  DeliveryS3Bucket:
    Type: AWS::S3::Bucket
  AuthorizeBeaconFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/authorize-beacon
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - apigateway:GET
              Resource: !Sub arn:aws:apigateway:${AWS::Region}::/*
  AuthorizeBeaconFunctionAssumeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource: !GetAtt AuthorizeBeaconFunction.Arn
  ProcessXAPIBeaconFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/process-xapi-beacon
      Events:
        ProcessXAPIBeacon:
          Type: Api
          Properties:
            Path: /xAPI/beacon
            Method: get
            RestApiId: !Ref ProcessXAPIBeaconApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
              Resource: !GetAtt EventProcessorStream.Arn
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ProcessXAPIStatementFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/process-xapi-statement
      Events:
        PostStatements:
          Type: Api
          Properties:
            Path: /xAPI/statements
            Method: post
            RestApiId: !Ref ProcessXAPIStatementApi
        PutStatement:
          Type: Api
          Properties:
            Path: /xAPI/statements
            Method: put
            RestApiId: !Ref ProcessXAPIStatementApi
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kinesis:PutRecord
                - kinesis:PutRecords
              Resource: !GetAtt EventProcessorStream.Arn
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ProcessXAPIStatementApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      # The next section is needed because SAM does not implement API Usage Plans yet.
      # See https://github.com/awslabs/serverless-application-model/issues/248
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub Nucleus-${NucleusId}-ProcessXAPIStatementApi
          version: 1.0
        x-amazon-apigateway-request-validators:
          parameters-only:
            validateRequestParameters: true
            validateRequestBody: false
        x-amazon-apigateway-request-validator: parameters-only
        paths:
          /xAPI/statements:
            parameters:
              - in: header
                name: X-Experience-API-Version
                description: xAPI version
                required: true
                schema:
                  type: string
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessXAPIStatementFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - api_key: []
            put:
              parameters:
                - in: query
                  name: statementId
                  description: Id of Statement to record
                  required: true
                  schema:
                    type: string
                    format: uuid
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessXAPIStatementFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - api_key: []
        components:
          securitySchemes:
            api_key:
              type: apiKey
              name: x-api-key
              in: header
  ProcessXAPIBeaconApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      # The next section is needed because SAM does not implement API Usage Plans yet.
      # See https://github.com/awslabs/serverless-application-model/issues/248
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub Nucleus-${NucleusId}-ProcessXAPIBeaconApi
          version: 1.0
        x-amazon-apigateway-request-validators:
          parameters-only:
            validateRequestParameters: true
            validateRequestBody: false
        x-amazon-apigateway-request-validator: parameters-only
        x-amazon-apigateway-api-key-source: AUTHORIZER
        paths:
          /xAPI/beacon:
            parameters:
              - in: query
                name: event
                description: The event payload for this request
                required: true
                schema:
                  type: string
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessXAPIBeaconFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - beacon_authorizer: []
        components:
          securitySchemes:
            beacon_authorizer:
              type: apiKey
              name: aid
              in: query
              x-amazon-apigateway-authtype: custom
              x-amazon-apigateway-authorizer:
                type: request
                authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizeBeaconFunction.Arn}/invocations
                authorizerCredentials: !GetAtt AuthorizeBeaconFunctionAssumeRole.Arn
                authorizerResultTtlInSeconds: 60
                identitySource: method.request.querystring.aid
  #
  # Interchange
  #
  NucleusConnectionRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Nucleus-${NucleusId}-ConnectionRequests
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  NucleusIncomingConnectionRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Nucleus-${NucleusId}-IncomingConnectionRequests
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: consumerEndpoint
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: consumerEndpoint
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
  NucleusConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub Nucleus-${NucleusId}-Connections
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: endpoint
          AttributeType: S
      KeySchema:
        - AttributeName: endpoint
          KeyType: HASH
  ExchangeApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - LoggingLevel: ERROR
          DataTraceEnabled: true
          MetricsEnabled: true
          ResourcePath: "/*"
          HttpMethod: "*"
      # The next section is needed because SAM does not implement API Usage Plans yet.
      # See https://github.com/awslabs/serverless-application-model/issues/248
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub Nucleus-${NucleusId}-ExchangeApi
          version: 1.0
        x-amazon-apigateway-request-validators:
          parameters-only:
            validateRequestParameters: true
            validateRequestBody: false
        x-amazon-apigateway-request-validator: parameters-only
        paths:
          /connections/requests:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionRequestCreateFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - cognito_authorizer: []
          /connections/requests/{id}/accept:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              parameters:
                - in: path
                  name: id
                  description: Connection request ID
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionRequestAcceptFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /connections/requests/{id}/send:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              parameters:
                - in: path
                  name: id
                  description: Connection request ID
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionRequestSendFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - sigv4: []
          /connections/requests/{id}/verify:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            get:
              parameters:
                - in: path
                  name: id
                  description: Connection request ID
                  required: true
                  schema:
                    type: string
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectionRequestVerifyFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /connections/incoming-requests:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IncomingConnectionRequestCreateFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /connections/incoming-requests/cancel:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IncomingConnectionRequestCancelFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /connections/incoming-requests/accept:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IncomingConnectionRequestAcceptFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - cognito_authorizer: []
          /connections/streams/update:
            options:
              responses:
                "200":
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  "application/json": '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StreamUpdateFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security:
                - sigv4: []
        components:
          securitySchemes:
            cognito_authorizer:
              name: Authorization
              type: apiKey
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                providerARNs:
                  - !GetAtt CognitoUserPool.Arn
                type: cognito_user_pools
            sigv4:
              name: Authorization
              type: apiKey
              in: header
              x-amazon-apigateway-authtype: awsSigv4
  ConnectionRequestAcceptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/connection-request-accept
      Events:
        ConnectionRequestAccept:
          Type: Api
          Properties:
            Path: /connections/requests/{id}/accept
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ConnectionRequestCancelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/connection-request-cancel
      Events:
        ConnectionRequestCancel:
          Type: Api
          Properties:
            Path: /connections/requests/{id}/cancel
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ConnectionRequestCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/connection-request-create
      Events:
        ConnectionRequestCreate:
          Type: Api
          Properties:
            Path: /connections/requests
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ConnectionRequestSendFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/connection-request-send
      Events:
        ConnectionRequestSend:
          Type: Api
          Properties:
            Path: /connections/requests/{id}/send
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ConnectionRequestVerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/connection-request-verify
      Events:
        ConnectionRequestVerify:
          Type: Api
          Properties:
            Path: /connections/requests/{id}/verify
            Method: get
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  StreamUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/stream-update
      Events:
        StreamUpdateFunction:
          Type: Api
          Properties:
            Path: /connections/streams/update
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  IncomingConnectionRequestAcceptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/incoming-connection-request-accept
      Events:
        IncomingConnectionRequestAccept:
          Type: Api
          Properties:
            Path: /connections/incoming-requests/accept
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  IncomingConnectionRequestCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/incoming-connection-request-create
      Events:
        IncomingConnectionRequestCreate:
          Type: Api
          Properties:
            Path: /connections/incoming-requests
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  IncomingConnectionRequestCancelFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/incoming-connection-request-cancel
      Events:
        IncomingConnectionRequestCancel:
          Type: Api
          Properties:
            Path: /connections/incoming-requests/cancel
            Method: post
            RestApiId: !Ref ExchangeApi
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  RouteEventsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/route-events
      Events:
        RouteEvents:
          Type: Kinesis
          Properties:
            Stream: !GetAtt EventProcessorStream.Arn
            StartingPosition: TRIM_HORIZON
            Enabled: true
      Policies:
        - !Ref ExchangeAdminFunctionPolicy
      DeadLetterQueue:
        Type: SNS
        TargetArn: !Ref LambdaDeadLetterQueueTopic
  ExchangeAdminFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub Nucleus-${NucleusId}-ExchangeAdminFunction
      Description: Admin access for a lambda in the exchange API
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - cloudformation:DescribeStacks
            Resource:
              - "*"
          - Effect: "Allow"
            Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:AttachRolePolicy
            Resource:
              - arn:aws:iam::*:role/nucleus*
              - arn:aws:iam::*:policy/*
          - Effect: "Allow"
            Action:
              - sts:AssumeRole
            Resource:
              - arn:aws:iam::*:role/nucleus_ex_*
          - Effect: "Allow"
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Resource:
              - !Sub ${NucleusConnectionRequestsTable.Arn}*
              - !Sub ${NucleusIncomingConnectionRequestsTable.Arn}*
              - !Sub ${NucleusConnectionsTable.Arn}*
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}*
  ExchangeConsumerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub Nucleus-${NucleusId}-ExchangeConsumer
      Description: Consumer access in the exchange API
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: execute-api:Invoke
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExchangeApi}/${Environment}/POST/connections/streams/update
  ExchangeProviderPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub Nucleus-${NucleusId}-ExchangeProvider
      Description: Provider access in the exchange API
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: execute-api:Invoke
            Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExchangeApi}/${Environment}/POST/connections/streams/update
          - Effect: Allow
            Action:
              - kinesis:PutRecord
              - kinesis:PutRecords
            Resource: !GetAtt EventProcessorStream.Arn
Outputs:
  CognitoUserPoolId:
    Description: CognitoUserPool
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: CognitoUserPoolClient
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolClientWebId:
    Description: CognitoUserPoolClientWeb
    Value: !Ref CognitoUserPoolClientWeb
  CognitoIdentityPoolId:
    Description: CognitoIdentityPool
    Value: !Ref CognitoIdentityPool
  AuthRole:
    Description: AuthRole
    Value: !GetAtt AuthRole.Arn
  UnauthRole:
    Description: UnauthRole
    Value: !GetAtt UnauthRole.Arn
  CollectionApiKeyId:
    Description: CollectionApiKey
    Value: !Ref CollectionApiKey
  EventProcessorStreamName:
    Description: EventProcessorStream
    Value: !Ref EventProcessorStream
  EventDeliveryStreamName:
    Description: EventDeliveryStream
    Value: !Ref EventDeliveryStream
  DeliveryS3BucketName:
    Description: DeliveryS3Bucket
    Value: !Ref DeliveryS3Bucket
  AuthorizeBeaconFunction:
    Description: AuthorizeBeaconFunction
    Value: !GetAtt AuthorizeBeaconFunction.Arn
  ProcessXAPIBeaconFunction:
    Description: ProcessXAPIBeaconFunction
    Value: !GetAtt ProcessXAPIBeaconFunction.Arn
  ProcessXAPIStatementFunction:
    Description: ProcessXAPIStatementFunction
    Value: !GetAtt ProcessXAPIStatementFunction.Arn
  ProcessXAPIStatementApi:
    Description: ProcessXAPIStatementApi
    Value: !Sub https://${ProcessXAPIStatementApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  ProcessXAPIBeaconApi:
    Description: ProcessXAPIBeaconApi
    Value: !Sub https://${ProcessXAPIBeaconApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  NucleusConnectionRequestsTableName:
    Description: NucleusConnectionRequestsTable
    Value: !Ref NucleusConnectionRequestsTable
  NucleusIncomingConnectionRequestsTableName:
    Description: NucleusIncomingConnectionRequestsTable
    Value: !Ref NucleusIncomingConnectionRequestsTable
  NucleusConnectionsTableName:
    Description: NucleusConnectionsTable
    Value: !Ref NucleusConnectionsTable
  ExchangeApi:
    Description: ExchangeApi
    Value: !Sub https://${ExchangeApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  ConnectionRequestAcceptFunction:
    Description: ConnectionRequestAcceptFunction
    Value: !GetAtt ConnectionRequestAcceptFunction.Arn
  ConnectionRequestCancelFunction:
    Description: ConnectionRequestCancelFunction
    Value: !GetAtt ConnectionRequestCancelFunction.Arn
  ConnectionRequestCreateFunction:
    Description: ConnectionRequestCreateFunction
    Value: !GetAtt ConnectionRequestCreateFunction.Arn
  ConnectionRequestSendFunction:
    Description: ConnectionRequestSendFunction
    Value: !GetAtt ConnectionRequestSendFunction.Arn
  ConnectionRequestVerifyFunction:
    Description: ConnectionRequestVerifyFunction
    Value: !GetAtt ConnectionRequestVerifyFunction.Arn
  StreamUpdateFunction:
    Description: StreamUpdateFunction
    Value: !GetAtt StreamUpdateFunction.Arn
  IncomingConnectionRequestAcceptFunction:
    Description: IncomingConnectionRequestAcceptFunction
    Value: !GetAtt IncomingConnectionRequestAcceptFunction.Arn
  IncomingConnectionRequestCreateFunction:
    Description: IncomingConnectionRequestCreateFunction
    Value: !GetAtt IncomingConnectionRequestCreateFunction.Arn
  IncomingConnectionRequestCancelFunction:
    Description: IncomingConnectionRequestCancelFunction
    Value: !GetAtt IncomingConnectionRequestCancelFunction.Arn
  RouteEventsFunction:
    Description: RouteEventsFunction
    Value: !GetAtt RouteEventsFunction.Arn
  ExchangeConsumerPolicy:
    Description: Consumer policy for Nucleus instances
    Value: !Ref ExchangeConsumerPolicy
  ExchangeProviderPolicy:
    Description: Provider policy for Nucleus instances
    Value: !Ref ExchangeProviderPolicy
  NucleusId:
    Description: An identifier for this particular Nucleus installation. Used in resource names.
    Value: !Ref NucleusId
  Namespace:
    Description: A namespace that identifies the default data domain for this instance. Used for partitioning data.
    Value: !Ref Namespace
